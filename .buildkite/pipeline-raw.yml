# SPDX-FileCopyrightText: 2021 Oxhead Alpha
# SPDX-License-Identifier: LicenseRef-MIT-OA

env:
  SET_VERSION: "export OCTEZ_VERSION=\"$(cat meta.json | jq -r '.tezos_ref' | cut -d'/' -f3)\""
  DOCKER_BUILDKIT: 1
  USE_NEWER_NIX: 1

steps:
 # We need to sign commits that update brew formulae separately
 - label: Sign formulae update commits
   if: build.branch =~ /^auto\/update-brew-formulae-.*/
   commands:
   - nix develop .#buildkite
       --command './scripts/sign-commits.sh'
 # To avoid race-conditions for the gpg key between jobs which sometimes leads to weird errors
 - wait

# - label: Build ubuntu source packages
#   key: build-ubuntu-source-packages
#   commands:
#   - eval "$SET_VERSION"
#   - nix develop .#docker-tezos-packages -c ./docker/build/ubuntu/build.py --type source
#   artifact_paths:
#     - ./out/*
#
# - label: Build fedora source packages
#   key: build-fedora-source-packages
#   commands:
#   - eval "$SET_VERSION"
#   - nix develop .#docker-tezos-packages -c ./docker/build/fedora/build.py --type source
#   artifact_paths:
#     - ./out/*
#
# - label: Sign ubuntu source packages
#   depends_on:
#   - "build-ubuntu-source-packages"
#   key: sign-ubuntu-source-packages
#   commands:
#   - eval "$SET_VERSION"
#   - buildkite-agent artifact download "out/*" . --step build-ubuntu-source-packages
#   - nix develop .#docker-tezos-packages -c ./docker/build/ubuntu/sign.py -d out -i 'Serokell <tezos-packaging@serokell.io>'
#   artifact_paths:
#     - ./out/*
#
# - label: Sign fedora source packages
#   depends_on:
#   - "build-fedora-source-packages"
#   key: sign-fedora-source-packages
#   commands:
#   - eval "$SET_VERSION"
#   - buildkite-agent artifact download "out/*" . --step build-fedora-source-packages
#   - nix develop .#docker-tezos-packages -c ./docker/build/fedora/sign.py -d out -i 'Serokell <tezos-packaging@serokell.io>'
#   artifact_paths:
#     - ./out/*
#
# - label: Publish ubuntu native packages
#   depends_on:
#   - "sign-ubuntu-source-packages"
#   commands:
#   - eval "$SET_VERSION"
#   - buildkite-agent artifact download "out/*" . --step sign-ubuntu-source-packages
#   - nix develop .#buildkite -c ./docker/build/ubuntu/upload.py -d out
#
# - label: Publish fedora native packages
#   depends_on:
#   - "sign-fedora-source-packages"
#   commands:
#   - eval "$SET_VERSION"
#   - buildkite-agent artifact download "out/*" . --step sign-fedora-source-packages
#   - nix develop .#buildkite -c ./docker/build/fedora/upload.py -d out
#
 - label: build-via-docker
   # this step is used as a dependency, so we're defining 'key' explicitely
   key: build-via-docker
   commands:
   - eval "$SET_VERSION"
   - cd docker
   - ./docker-static-build.sh
   artifact_paths:
     - ./docker/octez-*
   only_changes: &static_binaries_changes_regexes
   - docker/build/.*.sh
   - docker/build/Dockerfile
   - docker/docker-static-build.sh
   - meta.json
   - protocols.json
#
# - label: Build source packages from static binaries
#   key: build-source-packages-from-static-binaries
#   depends_on:
#   - "build-via-docker"
#   commands:
#   - eval "$SET_VERSION"
#   - mkdir binaries
#   - buildkite-agent artifact download "docker/*" binaries --step build-via-docker
#   - nix develop .#docker-tezos-packages -c ./docker/build/fedora/build.py --type source --output-dir epel --binaries-dir ./binaries/docker
#   artifact_paths:
#     - ./epel/*
#
# - label: Sign source packages built from static binaries
#   key: sign-source-packages-built-from-static-binaries
#   depends_on:
#   - "build-source-packages-from-static-binaries"
#   commands:
#   - eval "$SET_VERSION"
#   - buildkite-agent artifact download "epel/*" . --step build-source-packages-from-static-binaries
#   - nix develop .#docker-tezos-packages -c ./docker/build/fedora/sign.py -d epel -i 'Serokell <tezos-packaging@serokell.io>'
#   artifact_paths:
#     - ./epel/*
#
# - label: Publish epel packages
#   depends_on:
#   - "sign-source-packages-built-from-static-binaries"
#   commands:
#   - eval "$SET_VERSION"
#   - mkdir -p srcs
#   - buildkite-agent artifact download "epel/*" srcs --step sign-source-packages-built-from-static-binaries
#   - nix develop .#buildkite -c ./docker/build/fedora/upload.py -d srcs/epel --upload epel
#
# - label: Build Monterey x86_64 bottles
#   key: build-bottles-monterey-x86_64
#   agents:
#     queue: "x86_64-rosetta-darwin"
#   commands:
#   - nix develop .#autorelease-macos -c ./scripts/build-all-bottles.sh "monterey"
#   artifact_paths:
#     - '*.bottle.*'
#   retry:
#     automatic:
#       limit: 1
#
# - label: Build Monterey arm64 bottles
#   key: build-bottles-monterey-arm64
#   agents:
#     queue: "arm64-darwin"
#   commands:
#   - nix develop .#autorelease-macos -c ./scripts/build-all-bottles.sh "arm64_monterey"
#   artifact_paths:
#     - '*.bottle.*'
#   retry:
#     automatic:
#       limit: 1

# # We use the tag that triggered the pipeline here.
# # However, this requires that the tag and the release name are the same, which
# # in practice it's always the case in this repo.
# - label: Add Monterey bottle hashes to formulae
#   depends_on:
#   - "build-bottles-monterey-arm64"
#   - "build-bottles-monterey-x86_64"
#   commands:
#   - mkdir -p "Monterey"
#   - nix develop .#buildkite -c gh release download "octez-v20.0-1" -D "Monterey/" -p "*monterey.bottle.tar.gz"
#   - nix develop .#autorelease -c ./scripts/sync-bottle-hashes.sh "octez-v20.0-1" "Monterey"

 - label: create auto release/pre-release
   key: auto-release
   commands:
   - mkdir binaries
   - mkdir arm-binaries
   - buildkite-agent artifact download "docker/*" binaries --step "build-via-docker"
   - buildkite-agent artifact download "docker/*" arm-binaries --step "build-arm-via-docker"
   - ls binaries
   - nix develop .#autorelease -c ./scripts/autorelease.sh "$BUILDKITE_MESSAGE"
   depends_on:
    - "build-via-docker"
    - "build-arm-via-docker"
   only_changes:
   - scripts/autorelease.sh
   - scripts/shell.nix
   # files from 'nix/' directory are used in the autorelease script
   - nix/.*
   - tezos-release.nix
   - release.nix

 - label: build-arm-via-docker
   # this step is used as a dependency, so we're defining 'key' explicitely
   key: build-arm-via-docker
   commands:
   - eval "$SET_VERSION"
   - cd docker
   - ./docker-static-build.sh
   - >
     for f in ./octez-*; do
       mv "\$f" "\$f-arm64"
     done
   artifact_paths:
     - ./docker/octez-*
   agents:
     queue: "arm64-darwin"
   only_changes: *static_binaries_changes_regexes

 # Update mirror repositories on master if brew formulae have been updated or bottle hashes added
 - label: update stable mirror repository
   env:
    MIRROR_REPO: "git@github.com:serokell/tezos-packaging-stable.git"
   commands: &update_mirror
   - git pull origin "$BUILDKITE_BRANCH:$BUILDKITE_BRANCH"
   - git push --mirror "$$MIRROR_REPO"
